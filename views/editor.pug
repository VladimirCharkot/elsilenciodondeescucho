extends layout

//- include cabecera

block contenido
  
  div#editor
    div#controles
      div.btn#texto(title='Editor [E]', onclick='toggle("#md")')
      div.btn#preview(title='Vista previa [P]', onclick='toggle("#previa")')
      div.btn#archivos(title='Textos [A]', onclick='toggle("#arbol")')
      div.btn#imgs(title='Imágenes [I]', onclick='toggle("#imagenes")')
      //- div.btn#menu(title='Índice', onclick='toggle("#indices")')
      //- div.btn#csss(title='CSS', onclick='load_pieles()')
      div.btn#logout(title='Salir', onclick='logout()')
      
    div.panel#arbol
    div.panel#imagenes
      div
        div.btn#subir_imagen(title='Cargar imagen', onclick='document.querySelector("#archivo_imagen").click()')
        input#archivo_imagen(type='file', onchange='cargar_imagen()')
        div.btn#borrar_imagen(title='Borrar imagen', onclick='borrar_imagen()')
      div#vitrina
    div.panel#md.vacio
      div
        div.btn#nuevo(title='Nuevo texto', onclick='nuevo()')
        div.btn#guardar(title='Guardar cambios', onclick='guardar()')
        div.btn#reset(title='Descartar cambios', onclick='reset()')
        input#nombre(title='Titulo', onkeyup='editado();')
        div.btn#borrar(title='Borrar', onclick='borrar()')
        //- div.btn#status(title='Hay cambios sin guardar')
        div.btn#cerrar(title='Cerrar', onclick='cerrar()')
      textarea(onkeyup="previa(); editado();")
    div.panel#previa.escrito.expandido
    //- div.panel#indices
    //- div.panel#css
    

  //- jstree
  script(src="/js/jstree.min.js")
  link(rel="stylesheet", href="/js/style.min.css")
  
  //- markdownit
  script(src="/js/mdesde.js")
  
  script.
    
    let get_md = async (ruta) => {
      console.log(`Fetcheando ${ruta}`)
      try{
        let response = await fetch(ruta)
        let j = await response.text()
        return j
      }catch(err){
        throw err
      }
    }
    
    let upsert = async (ruta, contenido) => {
      try{
        console.log(`fetcheando /md/ ${ruta} con ${contenido}`)
        let response = await fetch(`/md/`,{
          method: 'post',
          body: JSON.stringify({
            md: contenido, 
            ruta: ruta
            }),
          headers: {'Content-type' : 'application/json'}
          })
        let j = await response.json()
        if(j.status != 200)
          console.log(`Error upserteando: ${j}`)
        return j
      }catch(err){
        throw err
      }
    }
    
    let rename = async (origen, destino) => {
      try{
        console.log(`fetcheando /md/ (renombrando) ${origen} a ${destino}`)
        let response = await fetch(`/md/`,{
          method: 'post',
          body: JSON.stringify({
            ruta_vieja: origen, 
            ruta_nueva: destino
            }),
          headers: {'Content-type' : 'application/json'}
          })
        let j = await response.json()
        if(j.status != 200 && j.status != 201)
          console.log(`Error upserteando: ${j}`)
        return j
      }catch(err){
        throw err
      }
    }
    
    let erase = async (origen) => {
      try{
        console.log(`fetcheando delete /md/`)
        let response = await fetch(`/md/`,{
          method: 'delete',
          body: JSON.stringify({
            ruta: origen
            }),
          headers: {'Content-type' : 'application/json'}
          })
        let j = await response.json()
        if(j.status != 200)
          console.log(`Error deleteando: ${j}`)
        return j
      }catch(err){
        throw err
      }
    }
    
    
    // Funciones de vista previa
    
    function previa(){
      let elmd = document.querySelector('#md textarea').value
      let parseado = md_esde.render(elmd)[0]
      document.querySelector('#previa').innerHTML = parseado
    }
    
    
    // Funciones de imagenes
    
    async function cargar_imagen(){
      let fs = document.querySelector('#archivo_imagen').files
      let req = new Request(`/imagenes/`)
      let data = new FormData();
      for(let i = 0; i < fs.length; i++){
        console.log(fs[i])
        data.append(`foto_${i}`, fs[i])
      }
    
      console.log('Enviando imagen...')
      fetch(req, {method: 'post', body: data})
        .then(r => { console.log('Recibiendo respuesta...'); return r; } )
        .then(r => r.json())
        .then(r => {
          if (r.status != 200){
            flash({mensaje: 'Error enviando imágenes!'})
          }
          for (let ruta of r.rutas){
            let i = crear_imagen({src: ruta})
            document.querySelector('#vitrina').appendChild(i)
          }
        })
        .catch(e => console.error(e))
      console.log('Imagen enviada!')
    }
    
    
    async function borrar_imagen(){
      let s = document.querySelector('#vitrina').getAttribute('data-selected')
      if (!s) { flash({mensaje: 'Nada seleccionado, nada borrado'}) }
      
      let r = await erase(s)
      flash(r)
      console.log(document.querySelector(`img[src='${s}']`))
      if(r.status == 200){
        document.querySelector(`img[src='${s}']`).remove()
      }
      
    }
    
    function cargar_imagenes(){
      console.log('Trayendo imágenes...')
      fetch('/imagenes')
        .then(r => r.json())
        .then(r => listar_imagenes(r))
    }
    
    
    function listar_imagenes(imagenes){
      let panel_imagenes = document.querySelector('#vitrina')
      panel_imagenes.innerHTML = ''
      
      for(let img of imagenes){
        let i = crear_imagen(img)
        panel_imagenes.appendChild(i)
      }
    }
    
    
    function crear_imagen(img){
      let panel_imagenes = document.querySelector('#vitrina')
      let i = document.createElement('img')
      i.setAttribute('src', img.src)
      i.addEventListener('click', () => {
        panel_imagenes.setAttribute('data-selected', img.src)
        document.querySelectorAll('#vitrina img').forEach(e => {
          e.classList.remove('seleccionada')
          })
        i.classList.add('seleccionada')
      })
      i.addEventListener('dblclick', () => {
        let ed = document.querySelector('#md textarea')
        if(ed.parentElement.classList.contains('expandido')){
          let cursor = ed.selectionStart
          let txt = ed.value
          ed.value = txt.slice(0, cursor) + `\n![Texto alt](${img.src})\n` + txt.slice(cursor, txt.length) 
        }
      })
      return i
    }
    
    
    async function updarbol(){
      let response = await fetch('/indice')
      let indice = await response.json()
      $('#arbol').jstree(true).settings.core.data = indice;
      $('#arbol').jstree(true).refresh();
    }
    
    async function load_md(ruta){
      let md = await get_md(ruta)
      document.querySelector('#md textarea').value = md
      document.querySelector('#md').classList.remove('vacio')
      document.querySelector('#md').classList.remove('nuevo')
      document.querySelector('#md').classList.remove('editado')
      document.querySelector('#md').classList.add('guardado')
      previa()
    }
    
    async function load_pieles(){
      if(document.querySelector('#status').style.opacity == 0){
        let response = await fetch('/css/pieles.css')
        let pieles = await response.text()
        document.querySelector('#md textarea').value = pieles
      }else{
        flash({msg: '¡Primero hay que guardar o descartar los cambios en el editor!'})
      }
    }
      
      
      
    // Funciones del editor
      
    function nuevo(){
      let editado = document.querySelector('#md').classList.contains('editado')
      if(editado){
        flash({mensaje: 'Guardar o resetear primero!'})
      }
      vaciar()
      document.querySelector('#md').classList.remove('vacio')
      document.querySelector('#md').classList.remove('guardado')
      document.querySelector('#md').classList.add('nuevo')
    }
    
    async function guardar(){
      let es_nuevo = document.querySelector('#md').classList.contains('nuevo')
      
      if(es_nuevo){
        console.log('Crear')
        let ruta_base = '/textos/'
        let nombre_base = document.querySelector('#nombre').value
        
        if(!nombre_base){
          flash({mensaje: 'Es necesario un nombre'})
          return
        }
        
        if(!nombre_base.match(/[A-Za-z0-9- ]+/)){
          flash({mensaje: '¡Nombre inválido! Sólo letras, números, espacios y guiones'})
          return
        }
        
        let nombre = nombre_base.toLowerCase().replaceAll(' ','-')
        let ruta = ruta_base + nombre + '.md'
        
        console.log(`El nombre es ${nombre}`)
        console.log(`La ruta es ${ruta}`)
        
        let contenido = document.querySelector('#md textarea').value
        let r = await upsert(ruta, contenido)
        
        if(r.status == 200 || r.status == 201) {
          document.querySelector('#md').classList.remove('nuevo')
          document.querySelector('#md').classList.remove('editado')
          document.querySelector('#md').classList.add('guardado')
        }
        
        console.log(r)
        flash(r)
        updarbol()
        
      }else{
        console.log('Guardar')
      
        let arbol = $.jstree.reference('#arbol')
        let nodo = document.querySelector('#md').getAttribute('data-selected')
        let data = arbol.get_node(nodo)
        let ruta_base = data ? data.original.ruta : '/textos/'
        
        console.log(`Guardando...`)
        console.log(`La ruta base es ${ruta_base}`)
        
        let nombre = document.querySelector('#nombre').value.toLowerCase().replaceAll(' ','-')
        let partes = ruta_base.split('/')
        partes[partes.length - 1] = nombre
        let ruta = partes.join('/')
        
        console.log(`El nombre es ${nombre}`)
        console.log(`La ruta es ${ruta}`)
        
        if(ruta_base != ruta){
          let rj = await rename(ruta_base, ruta)
        }
        
        let contenido = document.querySelector('#md textarea').value
        let r = await upsert(ruta, contenido)
        if(r.status == 200 || r.status == 201) {
          document.querySelector('#md').classList.remove('editado')
          document.querySelector('#md').classList.add('guardado')
        }
        //- desmarcar()
        console.log(r)
        flash(r)
        updarbol()
        
      }
        
    }
    
    async function reset(){
      let es_nuevo = document.querySelector('#md').classList.contains('nuevo')
      let seleccionado = document.querySelector('#md').getAttribute('data-selected')
      
      if(es_nuevo){
        vaciar()
        document.querySelector('#md').classList.remove('editado')
        return
      }
      
      let arbol = $.jstree.reference('#arbol')
      let data = arbol.get_node(seleccionado)
      
      console.log(data)
      
      let md = await get_md(data.original.ruta)
      document.querySelector('#md textarea').value = md
      document.querySelector('#md').classList.remove('editado')
      document.querySelector('#md').classList.add('guardado')
      previa()
    }
    
    function editado(){
      document.querySelector('#md').classList.remove('guardado')
      document.querySelector('#md').classList.add('editado')
    }
    
    function cerrar(){
      if (document.querySelector('#md').classList.contains('editado')){ 
        flash({mensaje: 'No está permitido cerrar un editor sin guardar o resetear'})
      }else{
        vaciar()
        document.querySelector('#md').classList.remove('editado')
        document.querySelector('#md').classList.remove('guardado')
        document.querySelector('#md').classList.remove('nuevo')
        document.querySelector('#md').classList.add('vacio')
      }
    }
    
    async function borrar(){
      if(confirm("¿Borrar posta?")){
        let arbol = $.jstree.reference('#arbol')
        let nodo = document.querySelector('#md').getAttribute('data-selected')
        let data = arbol.get_node(nodo)
        let ruta = data.original.ruta
        let r = await erase(ruta)
        flash(r)
        updarbol()
        vaciar()
      }
    }
    
    function vaciar(){
      document.querySelector('#md textarea').value = ''
      document.querySelector('#md #nombre').value = ''
    }
    
    
    
  script.
  
    /* Cargar árbol de textos */
    window.addEventListener('load', () => 
      fetch('/indice')
        .then(r => r.json())
        .then(indice => {
          
        $('#arbol').jstree({
          "types" : {
            "default" : {
              //- "icon" : "/icon/articulo.png"
              "icon" : "texto-icono"
            },
            "carpeta" : {
              "icon" : "carpeta-icono"
            }
          },
          "plugins" : [ "types", "dnd", "search" ],
          "core" : {
            "data" : indice,
            "check_callback" : true,
            "multiple" : false,
            "check_callback" : function (operation, node, node_parent, node_position, more) {
              console.log(operation)
              console.log(node)
              console.log(node_parent)
              console.log(node_position)
              console.log(more)
        			return operation == 'move_node' && node_parent.original.es_carpeta
        		}
          }
        }) 
          
        
        $('#arbol').on("select_node.jstree", (e, data) => {
          console.log("select_node.jstree")
          console.log(data)
          console.log(data.selected[0])
          let editado = document.querySelector('#md').classList.contains('editado')
          let seleccionado = document.querySelector('#md').getAttribute('data-selected')
          
          if(editado){
            flash({mensaje: 'Guardar o descartar cambios antes'})
            document.querySelectorAll('#md .btn').forEach(e => e.classList.add('call_eye'))
            let arbol = $.jstree.reference('#arbol')
            arbol.deselect_all()
            //- let nodo = arbol.select_node(seleccionado)
            return
          }
          
          if(!data.node.original.es_carpeta){
            load_md(data.node.original.ruta)
            document.querySelector('#md').setAttribute('data-selected', data.node.id)
            document.querySelector('#md #nombre').value = data.node.text
          }else{
            $.jstree.reference('#arbol')
              .toggle_node(data.node);
          }
        })
        
        document.querySelectorAll('#md .btn').forEach(e => {
          e.addEventListener('animationend', (ev) => {
            ev.target.classList.remove('call_eye')
          })
        })
        
        
        
        $('#arbol').on("create_node.jstree", (e, data) => {
          console.log("create_node.jstree")
          console.log(data)
        })
        
        $('#arbol').on("rename_node.jstree", (e, data) => {
          console.log("rename_node.jstree")
          console.log(data)
        })
        
        $('#arbol').on("delete_node.jstree", (e, data) => {
          console.log("delete_node.jstree")
          console.log(data)
        })
        
        /* Drag and drop move */
        $('#arbol').on("move_node.jstree", (e, data) => {
          console.log("move_node.jstree")
          console.log(data)
          
          let origen = data.node.original.ruta
          
          let destino = ''
          let p = data.node
          while(p.id != '#'){
            console.log(p)
            destino = '/' + $.jstree.reference('#arbol').get_node(p.id).text + destino
            p = $.jstree.reference('#arbol').get_node(p.parent)
            console.log(destino)
          }
          destino = '/textos' + destino
          console.log(destino)
          
          console.log(`Renombraría ${data.node.original.ruta} a ${destino}`)
          let r = rename(origen, destino).then(r => {
            if (r.status == 200){
              data.node.original.ruta = destino
            }
            flash(r)
          })
        })
        
        $('#arbol').on("copy_node.jstree", (e, data) => {
          console.log("copy_node.jstree")
          console.log(data)
        })
        
      }
    ))
    
    
    
    let corregir_imagenes = () => {
      document.querySelectorAll('p img').forEach(i => i.parentElement.replaceWith(i))
    }
      
      
    /* Vaciar editor */
    window.addEventListener('load', () => {
      
      /* Scroll sync */
      $('#md textarea').on('scroll', function () {
        $('#previa').scrollTop($(this).scrollTop());
      })
      
      $('#previa').on('scroll', function () {
        $('#md textarea').scrollTop($(this).scrollTop());
      })
      
      vaciar()
      previa()
      
      corregir_imagenes();
      
    })
    
    
    /* Cargar imágenes */
    let btn_imgs = document.querySelector('#imgs')
    btn_imgs.addEventListener('click', cargar_imagenes)
    btn_imgs.addEventListener('click', () => 
      btn_imgs.removeEventListener('click', cargar_imagenes)
    )
   
  
  script.
    function toggle(s){
      $(s).toggleClass('expandido')
    }
    
    
    function leer_tecla(e){
      
      if (e.key == 'Escape'){
        document.querySelector('#previa').focus()
        return
      }
      
      // Si estoy en el textarea no quiero capturar el teclado:
      var on_textarea = (document.activeElement.tagName.toLowerCase() == 'textarea')
      var on_input = (document.activeElement.tagName.toLowerCase() == 'input')
      if (on_textarea) return
      if (on_input) return
      
      if (e.key == ' ') toggle('#md')
      if (e.key == 'a'  || e.key == 'A') toggle('#arbol')
      if (e.key == 'i'  || e.key == 'I') toggle('#imagenes')
      if (e.key == 'p'  || e.key == 'P') toggle('#previa')
      if (e.key == 'e'  || e.key == 'E') toggle('#md')
      
    }

    window.onkeyup = leer_tecla;
    
    function logout(){
      window.location = '/logout'
    }
    
  

  
