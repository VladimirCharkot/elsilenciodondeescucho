extends layout

block contenido
  style.
    .visitas{
      padding: 10vw;
    }
    
    .g{
      padding: 1em;
    }
    
    #listas{
      display: flex;
      justify-content: space-between;
      width: 80vw;
    }
    
    .ranking{
      width: 35vw;
      padding: 0;
    }
    
    .ranking li{
      display: flex;
      justify-content: space-between;
    }
    
    .ranking p{
      display: inline-block;
    }
  
  script(type='application/javascript' src='https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js')
  .visitas
    h2 Visitas
    select#rango(onchange='update_chart(this)') Día
      option Hora
      option Día
      option Semana
      option Mes
      option Semestre
    div
      canvas#grafico(style='margin-bottom: 20vh;')
      #listas
        .g
          h3 Paths
          ol.ranking#paths
        .g
          h3 Ips
          ol.ranking#ips
      
  script.
  
    const chart = new Chart(document.querySelector('#grafico'),
      {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Visitas',
            backgroundColor: '#71bf72',
            borderColor: '#71bf72',
            data: [],
          }]
        },
        options: {}
      }
    )
    
    const update_chart = (e) => {
      
      const endpoints = {
        Hora : '/data/hora',
        Día : '/data/dia',
        Semana : '/data/semana',
        Mes : '/data/mes',
        Semestre : '/data/semestre',
      }
      
      let endpoint = endpoints[e.value]
      //- console.log(`Fetcheando ${endpoint}`)
      
      fetch(endpoint).then(r => r.json())
        .then(r => {
          //- console.log(r)
          confeccionar_grafico[e.value](r)
          cargar_listas(r)
        })
      
      
      
      //- Listas
      
      const agrupar = (criterio) => 
        (dataset) => _.sortBy(_.map(_.entries(_.groupBy(dataset, criterio)), ([path, accesos]) => [path, accesos.length]), ([path, accesos]) => -accesos)
      
      const agrupar_por_path = agrupar(d => d.path)
      
      const agrupar_por_ip = agrupar(d => d.ip)
      
      const cargar_lista = (ol_id, data) => {
        d3.select(ol_id).selectAll("*").remove()
        let lis = d3.select(ol_id).selectAll('li')
          .data(data)
        .enter()
          .append('li')
        lis.append('p').text(d => `${d[0]}`)
        lis.append('p').text(d => `${d[1]}`)
      }
      
      const cargar_listas = (dataset) => {
        let por_path = agrupar_por_path(dataset)
        let por_ip = agrupar_por_ip(dataset)
        cargar_lista('#paths', por_path)
        cargar_lista('#ips', por_ip)
      } 
      
      
      
      
      
      
      
      //- Lógica de confección de gráfico
      
      const linea_visitas = {
        label: 'Visitas',
        backgroundColor: '#71bf72',
        borderColor: '#71bf72'
      }
      
      const contar_segmentado = (dataset, limites) => {
        let ps = _.range(limites.length - 1)
                  .map(i => dataset
                            .filter(e => e.t > limites[i] && 
                                         e.t < limites[i+1]).length)
        ps.push(dataset.filter(e => e.t > limites[limites.length - 1]).length)
        return ps
      } 
      
      const t_redondeado_a = d => Date.now() - Date.now() % (d)
      const extraer_hora  = t => new Date(t).toTimeString().slice(0,5)
      const extraer_fecha = t => new Date(t).toDateString().slice(4,10)
      
      // Devuelve n momentos previos separados por d milisegundos
      const momentos_previos = (n, d) => now => _.range(0, n)
                                                 .map(n => now - d * n)
                                                 .reverse()
      
      const grafico = specs => dataset => {
        
        let now = t_redondeado_a(specs.redondeo)
        let momentos = momentos_previos(specs.puntos, specs.intervalo)(now)
        let labels = momentos.map(specs.etiquetado)
        let ps = contar_segmentado(dataset, momentos)
        
        let data = {
          labels: labels,
          datasets: [{...linea_visitas, data: ps}]
        }
        
        chart.data = data
        chart.update()
      }
      
      
      // Detalles de confección de gráfico
      
      const confeccionar_grafico = {
        
        Hora : grafico({
            redondeo: 1000 * 60,
            puntos: 13,
            intervalo: 1000 * 60 * 10,
            etiquetado: extraer_hora
            }),

        Día : grafico({
            redondeo: 1000 * 60 * 60,
            puntos: 25,
            intervalo: 1000 * 60 * 60 * 2,
            etiquetado: extraer_hora
            }),
        
        Semana : grafico({
            redondeo: 1000 * 60 * 60 * 24,
            puntos: 8,
            intervalo: 1000 * 60 * 60 * 24,
            etiquetado: extraer_fecha
            }),
        
        Mes : grafico({
            redondeo: 1000 * 60 * 60 * 24,
            puntos: 30,
            intervalo: 1000 * 60 * 60 * 24,
            etiquetado: extraer_fecha
            }),
        
        Semestre : grafico({
            redondeo: 1000 * 60 * 60 * 24,
            puntos: 26,
            intervalo: 1000 * 60 * 60 * 24 * 7,
            etiquetado: extraer_fecha
            })
      }
             
    }
    
    update_chart(document.querySelector('#rango'))
